{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Caroline's Course Notes!","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container for Go","text":"<ul> <li>Primary author: Caroline Bryan</li> <li> <p>Reviewer: Lizzie Coats</p> </li> <li> <p>Adapted from MKDocs tutorial with info from Go Documentation</p> </li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before attempting to set up your workspace, make sure you\u2019ve completed the following:</p> <ul> <li>Create a Github account</li> <li>Install git</li> <li>Install Docker</li> <li>Install VSCode</li> </ul>"},{"location":"tutorials/go-setup/#setting-up-your-local-and-remote-repositories","title":"Setting up Your Local and Remote Repositories","text":""},{"location":"tutorials/go-setup/#creating-your-local-repository","title":"Creating your local repository","text":"<p>In your VSCode terminal, type the following commands to create and switch into a directory for your project. </p> <pre><code>mkdir go-project\ncd go-project\n</code></pre> <p>Next, initialize a new git repository for your project. <pre><code>git init\n</code></pre></p> <p>Create a README file for your directory. <pre><code>echo \"# My Go Project\" &gt; README.md\n</code></pre></p> Note <p>The<code>&gt;</code> symbol writes the output of the <code>echo</code> command to a file called README.md</p> <p>Finally, stage and commit your changes to your new repository. <pre><code>git add .\ngit commit -m \"Adding a README file to my Go project.\"\n</code></pre></p>"},{"location":"tutorials/go-setup/#creating-your-remote-repository","title":"Creating your remote repository","text":"<p>Navigate to your Github and create a new repository with the same name as your local repository. Add whatever description you\u2019d like!</p> Note <p>Make sure your GitHub repository does not initialize a README file;  we already created one locally in the previous step, so there's no need to do it again.</p>"},{"location":"tutorials/go-setup/#linking-your-local-and-remote-repositories","title":"Linking your local and remote repositories","text":"<p>With your project still open in VSCode, add your Github repository as the corresponding remote repository: <pre><code>git remote add origin https://github.com/&lt;username&gt;/go-project.git\n</code></pre></p> <p>For your first push to your remote, you\u2019ll need to specify the upstream: <pre><code>git push --set-upstream origin main\n</code></pre></p> Note <p>The --set-upstream flag creates a tracking relationship between the main branch in your local repository and the one in your remote repository. This flag can be shortened to -u.</p> <p>After initially specifying the upstream, you can push to your remote repository with this command: <pre><code>git push origin\n</code></pre></p> <p>Woohoo! Your local and remote repositories are now set up and linked!</p>"},{"location":"tutorials/go-setup/#setting-up-your-dev-container","title":"Setting up Your Dev Container","text":"<p>Step 0: say a prayer to the Docker gods.</p>"},{"location":"tutorials/go-setup/#configure-your-dev-container","title":"Configure your Dev Container","text":"<p>Open up your \"go-project\" directory in VSCode again!</p> <ol> <li>Navigate to the left sidebar on your screen</li> <li>Click on the extensions tab</li> <li>Download the Dev Containers extension in VSCode</li> </ol> Note <p>You should see \"Dev Containers\" come up as an extension automatically, but if not, its identifier is <code>ms-vscode-remote.remote-containers</code>.</p> <p>In the root of go-project, create a directory called <code>.devcontainer</code>. Inside of this directory, create a file named <code>devcontainer.json</code>.</p> <p>The <code>devcontainer.json</code> file that you just created holds the configuration for your development environment. Paste this text inside of it: <pre><code>{\n  \"name\": \"COMP423 Go Tutorial\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.go\"]\n    }\n  },\n  \"postCreateCommand\": \"go mod init comp423-go-tutorial\"\n}\n</code></pre></p> <p>if you look closely at this code, you can see that we specify the following:</p> <ol> <li><code>name</code>: a name for your dev container</li> <li><code>image</code>: a base image from microsoft. this tutorial uses one associated with Go.</li> <li><code>customizations</code>: here, we install VSCode's Go plugin.</li> <li><code>postCreateCommand</code>: the command to run after the container is installed. In our case, this command initializes a go.mod file with comp423-go-tutorial as its path.</li> </ol>"},{"location":"tutorials/go-setup/#reopen-project-in-dev-container","title":"Reopen Project in Dev Container","text":"<ul> <li>Open your command palette in VS Code (Cmd+Shift+P)</li> <li>Select Dev Containers: Reopen in Container</li> <li>Let the container build &amp; start! This might take a minute.</li> </ul>"},{"location":"tutorials/go-setup/#verify-your-go-installation","title":"Verify Your Go Installation","text":"<p>Now that your container is open and running, open up a new terminal and run this subcommand: <pre><code>go version\n</code></pre> This should output a number - this is the version of Go that you're using!</p> Note <p>If you get an error message or don't see a number, double check that you've completed the dev container setup steps correctly.</p> <p>Congrats, your dev container is all set up and ready!</p>"},{"location":"tutorials/go-setup/#writing-running-your-first-go-program","title":"Writing + Running Your First Go Program","text":""},{"location":"tutorials/go-setup/#step-1-write-your-program","title":"Step 1: Write Your Program","text":"<p>Create a new file called <code>hello423.go</code> in your project's root directory.</p> <p>Paste in the following code:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre> <p>Breaking down this code:</p> <p><code>package main</code>: declares a main package, aka a way to group functions. This includes all the files in the same directory.</p> <p><code>import \"fmt\"</code>: importing a standard Go library package. This specifically allows you to print text to the console, which we do in the next function!</p> <p><code>func main()</code>: our main function automatically executes when you run a program in Go. This will print out \"Hello COMP423!\" to your console, but feel free to replace the text inside the parenthesis with any message you want!</p>"},{"location":"tutorials/go-setup/#step-2-build-and-run-your-program","title":"Step 2: Build and Run Your Program","text":"<p>Before we get started, let's understand the difference between the <code>build</code> and <code>run</code> commands in Go.</p> <p><code>go run</code>: this command will compile and run your program temporarily. It requires a Go environment to execute, and does not create an executable object file!</p> <p><code>go build</code>: this command compiles your program and creates a single, static binary executable object file. Since this file is statically linked, it contains all dependencies. You don't need a Go environment to run this file!</p> <p>a side note about gcc:</p> <p><code>gcc</code>: Just like <code>go build</code>, this command allows us to compile our program into an executable object file. While <code>gcc</code> offers us more flexibility in linking and compiling, it also is more complex and requires more effort. Since we want to quickly compile and execute our programs, we'll stick with the above go subcommands in this tutorial!</p> <p>Now that we understand our go subcommands, we can run our program!</p>"},{"location":"tutorials/go-setup/#run-your-program-locally-temporarily","title":"Run Your Program Locally + Temporarily:","text":"<p>Copy this code into the terminal of your VSCode project:</p> <pre><code>go run hello423.go\n</code></pre> <p>This will run the main function of your go program! You should see the following output:</p> <pre><code>Hello COMP423!\n</code></pre>"},{"location":"tutorials/go-setup/#fully-build-run-your-program","title":"Fully Build + Run Your Program:","text":"<p>To build an executable object file of your program, run the following in your project's VSCode terminal:</p> <pre><code>go build -o hello_comp423 hello423.go\n</code></pre> <p>This will return an executable object file named <code>hello_comp423</code>. Feel free to change the name in the command above!</p> <p>To run this compiled file, use the following code (adjusting the file name if necessary):</p> <pre><code>./hello_comp423\n</code></pre>"},{"location":"tutorials/go-setup/#closing-notes","title":"Closing Notes","text":"<p>You did it! At this point, you've set up your own Dev Container with a functioning Go environment, written your first Go program, and learned how to run and export it! \ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89</p> <p>If you enjoyed this Go tutorial, my venmo is @carolinebryann. I also accept poems as tokens of appreciation. \ud83e\udd2d</p>"}]}